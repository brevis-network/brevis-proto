syntax = "proto3";
package brevis;

import "brevis/types.proto";
import "common/circuit_data.proto";
import "google/api/annotations.proto";

service Gateway {
    rpc PrepareQuery(PrepareQueryRequest) returns (PrepareQueryResponse) {
        option (google.api.http) = {
            post: "/zk/prepareQuery"
            body: "*"
        };
    }

    rpc SubmitAppCircuitProof(SubmitAppCircuitProofRequest) returns (SubmitAppCircuitProofResponse) {
        option (google.api.http) = {
            post: "/zk/submitAppCircuitProof"
            body: "*"
        };
    }

    rpc GetQueryStatus(GetQueryStatusRequest) returns (GetQueryStatusResponse) {
        option (google.api.http) = {
            get: "/zk/getQueryStatus"
        };
    }

    rpc GetQueryInfoForOP(GetQueryInfoForOPRequest) returns (GetQueryInfoForOPResponse) {
        option (google.api.http) = {
            get: "/zk/getQueryInfoForOP"
        };
    }

    rpc GetSingleRunParams(GetSingleRunParamsRequest) returns (GetSingleRunParamsResponse) {
        option (google.api.http) = {
            get: "/zk/getSingleRunParams"
        };
    }

    rpc SendBatchQueries(SendBatchQueriesRequest) returns (SendBatchQueriesResponse) {
        option (google.api.http) = {
            post: "/zk/sendBatchQueries"
            body: "*"
        };
    }

    rpc SendBatchQueriesAsync(SendBatchQueriesRequest) returns (SendBatchQueriesAsyncResponse) {
        option (google.api.http) = {
            post: "/zk/sendBatchQueriesAsync"
            body: "*"
        };
    }

    rpc GetQueryKeysByBatchId(GetQueryKeysByBatchIdRequest) returns (GetQueryKeysByBatchIdResponse) {
        option (google.api.http) = {
            get: "/zk/getQueryKeysByBatchId"
        };
    }

    rpc GetCircuitDigest(CircuitDigestRequest) returns (CircuitDigestResponse) {
        option (google.api.http) = {
            get: "/zk/getCircuitDigest"
        };
    }

    rpc GetCircuitDummyInputRequest(CircuitDummyInputRequest) returns (CircuitDummyInputResponse) {
        option (google.api.http) = {
            get: "/zk/getCircuitDummyInput"
        };
    }

    rpc SubmitVK(SubmitVKRequest) returns (SubmitVKResponse) {
        option (google.api.http) = {
            post: "/zk/submitVK"
            body: "*"
        };
    }
    
}
message ErrMsg {
    ErrCode code = 1;
    string msg = 2;
}

enum ErrCode {
    ERROR_CODE_UNDEFINED = 0;
    ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED = 1;
    ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED = 2;
}

enum CheckStatus {
    IN_PROGRESS = 0;
    COMPLETE = 1;
}

enum QueryOption {
    ZK_MODE = 0;
    OP_MODE = 1;
}

message PrepareQueryRequest {
    uint64 chain_id = 1;
    repeated ReceiptInfo receipt_infos = 2;
    repeated StorageQueryInfo storage_query_infos = 3;
    repeated TransactionInfo transaction_infos = 4;
    common.AppCircuitInfo app_circuit_info = 5;
    uint64 target_chain_id = 6;
    QueryOption option = 7;
    bool use_plonky2 = 8 [deprecated = true]; 
}

message PrepareQueryResponse {
    ErrMsg err = 1;
    QueryKey query_key = 2;
    string fee = 3;
}

message SubmitAppCircuitProofRequest {
    QueryKey query_key = 1;
    uint64 target_chain_id = 2;
    string proof = 3;
    uint64 chain_id = 4;
    common.AppCircuitInfo app_circuit_info = 5;
}

message SubmitAppCircuitProofResponse {
    ErrMsg err = 1;
    bool success = 2;
}

message GetQueryStatusRequest {
    QueryKey query_key = 1;
    uint64 target_chain_id = 2;
}

enum QueryStatus {
    QS_UNKNOWN = 0;
    QS_TO_BE_PAID = 1;
    QS_PAID = 2;
    QS_PROOF_READY = 3;
    QS_COMPLETE = 4;
    QS_FAILED = 5;
    QS_OP_MESSAGE_PENDING = 6;
    QS_OP_MESSAGE_READY = 7;
    QS_OP_SUBMITTED = 8;
    QS_OP_MESSAGE_SUBMISSION_FAILED = 9;
    QS_OP_DISPUTING = 10;
    QS_OP_ASK_FOR_QUERY_DATA = 11;
    QS_OP_QUERY_DATA_SUBMITTED = 12;
    QS_OP_QUERY_DATA_POST_FAILED = 13;
    QS_OP_ASK_FOR_QUERY_PROOF = 14;
    QS_OP_DISPUTED = 15;
    QS_OP_ATTESTED = 16;
    QS_REFUNDED = 17;
}

message GetQueryStatusResponse {
    ErrMsg err = 1;
    QueryStatus status = 2;
    string tx_hash = 3;
    string proof = 4;
    ProofData proof_data = 5;
    string circuit_output = 6;
    string proof_with_public_inputs = 7;
}

message GetQueryInfoForOPRequest {
    string query_hash = 1;
    uint64 target_chain_id = 2;
}

message GetQueryInfoForOPResponse {
    ErrMsg err = 1;
    bytes query_info = 2;
}

message GetSingleRunParamsRequest {
    QueryKey query_key = 1;
    uint64 target_chain_id = 2;
}

message GetSingleRunParamsResponse {
    ErrMsg err = 1;
    uint64 src_chain_id = 2;
    ProofData proof_data = 3;
    string merkle_root = 4;
    repeated string merkle_proof = 5;
    uint64 node_index = 6;
    string app_circuit_output = 7;
}

message ProofData {
    string commit_hash = 1;
    string vk_hash = 2 [deprecated = true]; 
    string app_commit_hash = 3;
    string app_vk_hash = 4;
    string smt_root = 5;
    string dummy_input_commitment = 6;
}

message SendBatchQueriesRequest {
    uint64 chain_id = 1;
    repeated Query queries = 2;
    uint64 target_chain_id = 3;
    QueryOption option = 4;
    string api_key = 5; // authentication
}

message Query {
    repeated ReceiptInfo receipt_infos = 1;
    repeated StorageQueryInfo storage_query_infos = 2;
    repeated TransactionInfo transaction_infos = 3;
    common.AppCircuitInfoWithProof app_circuit_info = 4;
    bool use_plonky2 = 5 [deprecated = true];
}

message SendBatchQueriesResponse {
    ErrMsg err = 1;
    repeated QueryKey query_keys = 2;
    string fee = 3;
}

message QueryKey {
    string query_hash = 1;
    uint64 nonce = 2;
}

message SendBatchQueriesAsyncResponse {
    ErrMsg err = 1;
    string batch_id = 2;
    repeated string request_ids = 3;
    uint64 nonce = 4;
}

message GetQueryKeysByBatchIdRequest {
    string batch_id = 1;
}

message GetQueryKeysByBatchIdResponse {
    ErrMsg err = 1;
    repeated QueryKey query_keys = 2;
}

message CircuitDigestRequest{}

message CircuitDigestResponse{
    ErrMsg err = 1;
    repeated uint64 hashes_limbs = 2;
}

message CircuitDummyInputRequest{
    uint64 chain_id = 1;
}

message CircuitDummyInputResponse{
    ErrMsg err = 1;
    string receipt = 2;
    string storage = 3;
    string tx = 4;
}

message SubmitVKRequest {
    string vk_hash = 1;
    string vk_raw = 2;
}

message SubmitVKResponse {
    ErrMsg err = 1;
}